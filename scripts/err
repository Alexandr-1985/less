'use strict';
/////////////////////////////////////////

let isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
};
//while(isNaN(amount) || amount === '' || question === null)
/////////////////////////////////////////////////////////////////////////
let money;
//question about salary
//проверка вхоящийх данных
let start = function() {
    do {
        money = prompt('Ваш месячный доход?');
    } while (!isNumber(money));
};
start();

//создаем объект, будет содержать все переменные которые мы создавали, будут св-ми объекта!
let appData = {
    income: {}, //дополнительные доходы
    addIncome: [], //дополнительные доходы
    expenses: {}, //дополнительные расходы
    addExpenses: [], //массив с возможными расходами
    deposite: false,
    mission: 100000,
    period: 3,
    //новый метод который расспрашивает пользователя
    asking: function() {
        // возможные расходы
        let addExpenses = prompt(
            'Перечислите возможные расходы за рассчитываемый период через запятую',
            'Internet, Taxy, Communal payment, Credit'
        );
        appData.addExpenses = addExpenses.toLocaleLowerCase().split(', ');
        appData.deposit = confirm('Есть ли у вас депозит в банке?');
    },
};

/////////////////////////////////////////////////////////////////////////////////

//metods and properties
let showTypeOf = (data) => {
    console.log(data, typeof data);
};
showTypeOf(money);
showTypeOf(appData.income);
showTypeOf(appData.deposit);

let expenses = [];

//Объявить ф-ю всех обязательных расходов
let getExpensesMonth = function() {
    let sum = 0;
    let amount;
    for (let i = 0; i < 2; i++) {
        expenses[i] = prompt('Введите обязательную статью расходов?', ' ');

        do {
            amount = prompt('Во сколько это обойдется?', ' ');
        } while (!isNumber(amount));
        sum += amount;
    }
    console.log(expenses);
    return sum;
};

let expensesMonth = getExpensesMonth();

console.log('Обязатеьные расходы за месяц:', expensesMonth);

//Объявить ф-ю которая возвращает накопления за месяцев
let getAccumulatedMonth = function() {
    if (!money) {
        money = 0;
    }
    return money - expensesMonth;
};
console.log('Накопления за месяц: ', getAccumulatedMonth(money));

//обьявить переменную и присвоить результат вызова ф-ии
let accumulatedMonth = getAccumulatedMonth();

//Обьявить функцию getTargetMonth. Подсчитать за какой период будет достигнута цель, зная результат месячного накопления accumulatedMonth и возвращает результат.
let getTargetMonth = function() {
    return Math.round(appData.mission / accumulatedMonth);
};
let targetMonth = getTargetMonth(appData.mission, accumulatedMonth);

targetMonth >= 0 ?
    console.log(`Срок достижения цели за: ${targetMonth} месяцев`) :
    console.log(
        `Срок достижения цели не будет достигнут за: ${targetMonth} месяцев`
    );

//budgetMonth учитывая бюджет на месяц
let budgetDay = accumulatedMonth / 30;
console.log('Бюджет на день: ' + Math.floor(budgetDay) + ' рублей');

//Конструктор условий
let getStatusIncome = function(budgetDay) {
    if (budgetDay > 1200) {
        return 'У вас высокий уровень дохода';
    } else if (600 < budgetDay < 1200) {
        return 'У вас средний уровень дохода';
    } else if (600 > budgetDay > 0) {
        return 'Уровень дохода ниже среднего';
    } else if (budgetDay < 0) {
        return 'Что то пошло не так';
    } else if (budgetDay === 1200) {
        return 'You are good!';
    } else if (budgetDay === 600) {
        returng('Надо стараться');
    } else if (budgetDay === 0) {
        return 'Меняй работу';
    } else {
        return 'Иди к начальнику проси повышения';
    }
};
getStatusIncome(budgetDay);
console.log('Status: ', getStatusIncome(budgetDay));

////////////////////////////////////////////////////////

console.log(appData.addExpenses.length);

console.log(
    'Period is equal ' + appData.period + ' month. ',
    `Goal to earn ${appData.mission} euro!`
);

/////////////////////////////////////////